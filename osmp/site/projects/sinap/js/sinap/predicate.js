"use strict";System.register([],function(_export,_context){function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var _createClass,TYPE,Predicate,Regex,LogicalAnd,parse;return{setters:[],execute:function(){_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),TYPE={REGEX:"regex",AND:"and"},Predicate=function(){function Predicate(){_classCallCheck(this,Predicate)}return _createClass(Predicate,[{key:"execute",value:function(){return!0}}]),Predicate}(),Regex=function(_Predicate){function Regex(config){_classCallCheck(this,Regex);var _this=_possibleConstructorReturn(this,Object.getPrototypeOf(Regex).call(this));return _this.regexp=new RegExp(config.pattern),_this}return _inherits(Regex,_Predicate),_createClass(Regex,[{key:"execute",value:function(value){return null!==value&&void 0!==value&&this.regexp.test(value)}}]),Regex}(Predicate),LogicalAnd=function(_Predicate2){function LogicalAnd(config){_classCallCheck(this,LogicalAnd);var _this2=_possibleConstructorReturn(this,Object.getPrototypeOf(LogicalAnd).call(this));return _this2.subs=config.subpredicates.map(function(item){return parse(item)}),_this2}return _inherits(LogicalAnd,_Predicate2),_createClass(LogicalAnd,[{key:"execute",value:function(value){return this.subs.every(function(predicate){return predicate.execute(value)})}}]),LogicalAnd}(Predicate),parse=function(config){switch(config.type){case TYPE.REGEX:return new Regex(config);case TYPE.AND:return new LogicalAnd(config);default:throw new Error("Некорректный тип predicate: "+config.type)}},_export("default",parse)}}});